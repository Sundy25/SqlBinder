<UserControl x:Class="SqlBinder.DemoApp.Controls.CheckList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:SqlBinder.DemoApp"
             xmlns:controls="clr-namespace:SqlBinder.DemoApp.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="300" 
             d:DesignWidth="300" 
             BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" 
             Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
             BorderThickness="1">

	<UserControl.CommandBindings>
		<CommandBinding Command="{x:Static controls:CheckListCommands.ClearSelection}" Executed="OnClearFilter" />
		<CommandBinding Command="{x:Static controls:CheckListCommands.SelectAll}" Executed="OnSelectAll" />
		<CommandBinding Command="{x:Static controls:CheckListCommands.InvertSelection}" Executed="OnInvertSelection" />
	</UserControl.CommandBindings>

	<UserControl.Resources>
		<!--
			TextBox styling, just to lose all borders.
		-->
		<Style x:Key="BlankTextBox" TargetType="{x:Type TextBox}">
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<Border x:Name="bg" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="BorderBrush" TargetName="bg" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"/>
								<Setter Property="BorderThickness" TargetName="bg" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}"/>
							</Trigger>

							<Trigger Property="IsFocused" Value="True">
								<Setter Property="BorderBrush" TargetName="bg" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"/>
								<Setter Property="BorderThickness" TargetName="bg" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--
			DataGrid styling, makes it look OKish. Also enables one-click checkbox checking.
		-->
		<Style x:Key="FilterDataGridCell" TargetType="{x:Type DataGridCell}">
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
			<Setter Property="IsTabStop" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridCell}">
						<Grid Background="{TemplateBinding Background}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
								<ContentPresenter VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Border>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</UserControl.Resources>

	<!--
		Grid split in two columns, search box above and data grid below. There's a line in between as well.
	-->
	<Grid x:Name="gridRoot" DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
		<Grid.Resources>
			<CollectionViewSource x:Key="filteredItems" Source="{Binding CheckListItems}" Filter="CollectionViewSource_Filter" />
		</Grid.Resources>

		<Grid.RowDefinitions>
			<RowDefinition Height="26"/>
			<RowDefinition Height="1*"/>
			<RowDefinition Height="26"/>
		</Grid.RowDefinitions>

		<!--
			Search text box with some watermark functionality. Watermark is only visible when there's no search text and no focus.
		-->
		<Grid Grid.Row="0">
			<TextBox x:Name="textboxSearch" TextWrapping="NoWrap" Text="" VerticalAlignment="Center" Margin="4,0" Style="{DynamicResource BlankTextBox}" TextChanged="textboxSearch_TextChanged"/>
			<TextBlock IsHitTestVisible="False" Text="{Binding WatermarkText}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="4,0" Foreground="DarkGray">
				<TextBlock.Style>
					<Style TargetType="{x:Type TextBlock}">
						<Setter Property="Visibility" Value="Collapsed"/>
						<Style.Triggers>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition Binding="{Binding Text, ElementName=textboxSearch}" Value="" />
									<Condition Binding="{Binding IsFocused, ElementName=textboxSearch}" Value="false" />
								</MultiDataTrigger.Conditions>
								<Setter Property="Visibility" Value="Visible"/>
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</TextBlock.Style>
			</TextBlock>
		</Grid>

		<Line Grid.Row="1" RenderOptions.EdgeMode="Aliased" Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" StrokeThickness="1" X2="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" SnapsToDevicePixels="True"  />

		<!-- 
			Data grid, it has auto search and binds to collection view source thing that has filtering capability. 
		-->
		<DataGrid Grid.Row="1" 
			x:Name="datagridItems" 			
			AutoGenerateColumns="False"
			BorderThickness="0" 
			SelectionMode="Extended"				  
			HeadersVisibility="None" 
			GridLinesVisibility="None" 
			Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"
			CellStyle="{DynamicResource FilterDataGridCell}"
			ItemsSource="{Binding Source={StaticResource filteredItems}}"
			IsSynchronizedWithCurrentItem="False"
			CanUserAddRows="False" 
			Margin="2,4,2,2"
			IsTextSearchEnabled="True"
			IsTextSearchCaseSensitive="False"
			TextSearch.TextPath="Name"
			KeyDown="datagridItems_KeyDown"
			MouseDoubleClick="datagridItems_OnMouseDoubleClick"
			SelectionChanged="datagridItems_OnSelectionChanged">

			<DataGrid.SelectedItem>
				<Binding ElementName="gridRoot" Path="DataContext.(controls:CheckList.SelectedItem)">
					<Binding.Converter>
						<!-- Source must be a resource since there is no inheritance context -->
						<controls:CheckListItemDataConverter Source="{Binding Source={StaticResource filteredItems}}" />
					</Binding.Converter>
				</Binding>
			</DataGrid.SelectedItem>

			<DataGrid.RowStyle>
				<Style TargetType="DataGridRow">
					<Style.Triggers>
						<DataTrigger Binding="{Binding Checked}" Value="True">
							<Setter Property="FontWeight" Value="Bold" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</DataGrid.RowStyle>

			<DataGrid.Columns>
				<DataGridTemplateColumn x:Name="columnCheck">
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<CheckBox IsEnabled="{Binding ElementName=gridRoot, Path=DataContext.(controls:CheckList.IsEditable)}" 
									  IsChecked="{Binding Path=(controls:CheckList+CheckListItem.Checked), UpdateSourceTrigger=PropertyChanged}" IsTabStop="False" />
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>

				<DataGridTextColumn x:Name="columnText" Binding="{Binding Name}" IsReadOnly="True" >
					<DataGridTextColumn.CellStyle>
						<Style TargetType="DataGridCell" BasedOn="{StaticResource FilterDataGridCell}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding ElementName=gridRoot, Path=DataContext.(controls:CheckList.HasDescription), FallbackValue=False}" Value="True" >
									<Setter Property="FontWeight" Value="Bold" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</DataGridTextColumn.CellStyle>
				</DataGridTextColumn>

				<DataGridTextColumn x:Name="columnDescription" Binding="{Binding Description}" IsReadOnly="True" Width="1*" />
			</DataGrid.Columns>
		</DataGrid>

		<StackPanel Grid.Row="2" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="4,0" IsEnabled="{Binding IsEditable}">
			<TextBlock Padding="0">
				<Hyperlink IsEnabled="{Binding AllowSelectAll}" Command="{x:Static controls:CheckListCommands.SelectAll}">Select All</Hyperlink>
				<Hyperlink Command="{x:Static controls:CheckListCommands.ClearSelection}">Clear</Hyperlink>
				<Hyperlink IsEnabled="{Binding AllowInvert}" Command="{x:Static controls:CheckListCommands.InvertSelection}">Invert</Hyperlink>
			</TextBlock>
		</StackPanel>

	</Grid>
</UserControl>
